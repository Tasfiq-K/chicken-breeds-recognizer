# -*- coding: utf-8 -*-
"""chicken_data_training_and_cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VBkzKSpo0_6BYp13D_WA1_YjslZxkDr3
"""

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext autoreload
# %autoreload 2
# %matplotlib inline
bs = 32
version = 3

!pip install -Uqq fastai

from fastai import *
from fastai.vision.all import *
from fastai.vision.widgets import *

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Dataset/chicken_breed_recognizer

data_path = 'data'

"""# Fetching data"""

dblock = DataBlock(
    blocks=(ImageBlock, CategoryBlock),
    get_items=get_image_files,
    splitter=RandomSplitter(valid_pct=0.1, seed=42),
    get_y=parent_label,
    item_tfms=Resize(128)
)

image_counts = get_image_files(data_path)
image_counts

dblock = dblock.new(item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms())
dls = dblock.dataloaders(data_path, bs=bs)
torch.save(dls, f"cap_dataloader_v{version}.pkl")

# dls = torch.load('dataloaders/chicken_breeds_dataloader_{version}.pkl')

dls.to(device)

model_path = 'models'

if not os.path.exists(model_path):
    os.mkdir(model_path)

model = vision_learner(dls, resnet34, metrics=[error_rate, accuracy])

model.to(device)

model.load(f"chicken_breed_recognizer-v{version-1}")

model.fine_tune(5)

model.save(f"chicken_breed_recognizer-v{version}")

# model = model.load(f"chicken_breed_recognizer-v{version}")

interp = ClassificationInterpretation.from_learner(model)
interp.plot_confusion_matrix(figsize=(10, 10)) # coching, cherry egger, easter egger, jersey giant, nankin, new hampshire, orpingtons,

"""### Most problems: cochin, breese, cherry egger, easter egger, jersey giant, nankin, new hampshire, orpingtons,"""

interp.plot_top_losses(9, nrows=3, figsize=(20, 10))

cleaner = ImageClassifierCleaner(model)
cleaner

for idx in cleaner.delete():
    cleaner.fns[idx].unlink()   # delete the irrelevant data
for idx, categroy in cleaner.change():
    shutil.move(str(cleaner.fns[idx]), f"{data_path}/category")

model.export(f"chicken_breed_recognizer-v{version-1}.pkl")

